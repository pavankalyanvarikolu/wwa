# The name of the workflow.
name: Build and Deploy

# Run the workflow when code is pushed to the main branch
on:
  push:
    branches:
      - main

# Set environment variables
env:
  MONGODB_URI: ${{ secrets.MONGODB_URI }}
  TOKEN_KEY: ${{ secrets.TOKEN_KEY }}
  EMAIL: ${{ secrets.EMAIL }}
  PASSWORD: ${{ secrets.PASSWORD }}

# This is the workflow that is being run.
jobs:
  build-and-deploy:
    # This is telling GitHub to run the workflow on the latest version of Ubuntu.
    runs-on: ubuntu-latest
    steps:
      # Checkout the code from the GitHub repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Install dependencies and run tests for the client application
      - name: Install frontend
        working-directory: ./WWA-frontend-master
        run: |
          npm install
         

      # Install dependencies, export environment variables to be used by application and run tests for the server application
      - name: Install backend
        working-directory: ./WWA-backend-master
        run: |
          npm install
         

      # Build a Docker image for the client application
      - name: Build Client Docker Image
        working-directory: ./WWA-frontend-master
        # Build image with tag pavanvarikolu/wwafrontend:client
        run: |
           docker build -t pavanvarikolu/wwafrontend-client:latest .

      # Build a Docker image for the server application
      - name: Build Server Docker Image
        working-directory: ./WWA-backend-master
        # Build image with tag pavanvarikolu/wwabackend:server
        run: |
          docker build -t pavanvarikolu/wwabackend-server:latest .

      # Login to Docker Hub using credentials from repository secrets
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push the Docker images to Docker Hub
      - name: Push Docker Images to Docker Hub
        run: |
          docker push pavanvarikolu/wwafrontend:client-${{github.run_number}} || true
          docker push pavanvarikolu/wwabackend:server-${{github.run_number}} || true

  IAC_Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codes
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESSKEY}}
          aws-secret-access-key: ${{secrets.AWS_SECRETEKEY}}
          aws-region: ${{secrets.AWS_REGION}}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
         terraform_version: "1.1.7"

      - name: Run Terraform Commands
        run: |
         cd wwa/terraform
         terraform init
         terraform validate -no-color
         terraform plan 
         terraform apply -auto-approve

      - name: Capture EC2 Public IP
        id: ec2_public_ip
        run: |
         cd DevOps2023-2024-Group3/terraform
         EC2_PUBLIC_IP=$(terraform output ec2_public_ip)
         echo "::set-output name=ec2_public_ip::$EC2_PUBLIC_IP"

  OWASP-ZAP_scan:
    runs-on: ubuntu-latest
    name: OWASP-ZAP_scaning
    permissions: write-all
    needs: [ build-and-deploy, IAC_Build ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get Terraform Output
        id: terraform_output
        run: |
         cd wwa/terraform
         TARGET_URL=$(terraform output ec2_public_ip)
         echo "::set-output name=target::$TARGET_URL"
