# The name of the workflow.
name: Build, Test, and Deploy

# Run the workflow when code is pushed to the main branch
on:
  push:
    branches:
      - main

# Set environment variables
env:
  MONGODB_URI: ${{ secrets.MONGODB_URI }}
  TOKEN_KEY: ${{ secrets.TOKEN_KEY }}
  EMAIL: ${{ secrets.EMAIL }}
  PASSWORD: ${{ secrets.PASSWORD }}

# This is the workflow that is being run.
jobs:
  build-test-and-deploy:
    # This is telling GitHub to run the workflow on the latest version of Ubuntu.
    runs-on: ubuntu-latest
    steps:
      # Checkout the code from the GitHub repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Install dependencies and run tests for the client application
      # - name: Install frontend
      #   working-directory: ./WWA-frontend-master
      #   run: |
      #     npm install

      # # Install dependencies, export environment variables to be used by application and run tests for the server application
      # - name: Install backend
      #   working-directory: ./WWA-backend-master
      #   run: |
      #     npm install

      # # Login to Docker Hub using credentials from repository secrets
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # # checking docker login status
      # - name: Check docker login status
      #   if: failure()
      #   run: echo Docker login process failed.

      # # removing old docker images
      # - name: Deleting old docker images
      #   run: |
      #     docker rmi -f $(docker image ls -a -q)

      # # Build a Docker image for the client application
      # - name: Build Client Docker Image
      #   working-directory: ./WWA-frontend-master
      #   # Build image with tag pavanvarikolu/wwafrontend-client:latest
      #   run: |
      #     docker build -t pavanvarikolu/wwafrontend-client:latest .

      # # Build a Docker image for the server application
      # - name: Build Server Docker Image
      #   working-directory: ./WWA-backend-master
      #   # Build image with tag pavanvarikolu/wwabackend-server:latest
      #   run: |
      #     docker build -t pavanvarikolu/wwabackend-server:latest .

      # # Push the Docker images to Docker Hub
      # - name: Push Docker Images to Docker Hub
      #   run: |
      #     docker push pavanvarikolu/wwafrontend-client:latest || true
      #     docker push pavanvarikolu/wwabackend-server:latest || true

  iac-build-and-deploy:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: build-test-and-deploy
    outputs:
      target_url: ${{ steps.running-terraform-commands.outputs.target }}
    steps:
      - name: Checkout codes
        uses: actions/checkout@v4
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESSKEY}}
          aws-secret-access-key: ${{secrets.AWS_SECRETEKEY}}
          aws-region: ${{secrets.AWS_REGION}}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"
      - name: Terraform Init, Format, Validate
        run: |
            terraform init
            terraform fmt -check
            terraform validate -no-color
        working-directory: terraform
          
      - name: Terraform Plan
        run: terraform plan --var-file=terraform.tfvars
        working-directory: terraform
      - name: Terraform Apply
        run: terraform apply --auto-approve
        working-directory: terraform
          
    
  infrastructure-audit:
    name: infrastructure-audit
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.infrastructure-audit == 'yes' }}
    
    steps:
        - name: Checkout
          uses: actions/checkout@v3
    
        - name: Install tfsec
          run: |
            wget -q $(wget -qO- https://api.github.com/repos/aquasecurity/tfsec/releases/latest | grep -o -E "https://[^\"]*linux_amd64.tar.gz") -O tfsec.tar.gz
            tar -xzf tfsec.tar.gz
            sudo install tfsec /usr/local/bin/
          working-directory: terraform
    
        - name: Run tfsec
          run: tfsec . --exclude-downloaded-modules --tfvars-file terraform.tfvars
          working-directory: terraform
          continue-on-error: true
    
        - name: Install Checkov
          run: pip install checkov
    
        - name: Run Kubernetes YAMLS files Scan
          run: |
            checkov -d . --framework kubernetes --download-external-modules true
          continue-on-error: true
    
        - name: Run Checkov IAC Scan
          run: |
            checkov -d . --framework terraform --download-external-modules true
          working-directory: terraform
          continue-on-error: true
          
    
      
  # zap_scan:
  #   name: OWASP-ZAP integration 
  #   runs-on: ubuntu-latest
  #   permissions: write-all
  #   needs: iac-build-and-deploy
  #   steps:
  #     - name: Wait for 2 minutes
  #       run: sleep 120
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #       with:
  #         ref: main
  #     - name: ZAP Scan
  #       uses: zaproxy/action-baseline@v0.11.0
  #       with:
  #      #   token: ${{ secrets.GITHUB_TOKEN }}
  #         docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
  #         target: 'http://${{ needs.iac-build-and-deploy.outputs.target_url }}:3000'
  #         rules_file_name: '.zap/rules.tsv'
  #         cmd_options: '-a'
  #     - name: Upload ZAP Scan Report
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: zap-report
  #         path: |
  #           report_html.html
  #           report_json.json
